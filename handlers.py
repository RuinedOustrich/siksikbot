import os
import logging
import time
import asyncio
import re
import shutil
import subprocess
import tempfile
import uuid
from telegram import Update
from telegram.constants import ChatType, ParseMode
from telegram.ext import CallbackContext, ContextTypes

from context_manager import context_manager
from pollinations_service import send_to_pollinations, transcribe_audio, analyze_image
from telegram_utils import show_typing, send_long_message, delete_advertisement


logger = logging.getLogger(__name__)


async def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    user = update.effective_user
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} –≤ —á–∞—Ç–µ {chat_id} (—Ç–∏–ø: {chat_type})")
    
    context_manager.init_context(chat_id)
    
    current_prompt = context_manager.get_system_prompt()
    # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –≥—Ä—É–ø–ø
    if update.effective_chat.type in [update.effective_chat.PRIVATE]:
        message_text = (
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ Pollinations.AI.\n"
            "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n\n"
            "‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
            "/reset - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/prompt - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
            "/setprompt - –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
            "/updatecmds - –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥\n\n"
            "üé≠ **–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:**\n"
            f"{current_prompt[:100]}{'...' if len(current_prompt) > 100 else ''}\n\n"
            "üö´ –†–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è!"
        )
    else:
        message_text = (
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ Pollinations.AI.\n"
            "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n\n"
            "‚öôÔ∏è **–ö–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ):**\n"
            "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
            "/reset - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/prompt - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
            "/setprompt - –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
            "/updatecmds - –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥\n\n"
            "üí° **–í –≥—Ä—É–ø–ø–∞—Ö:**\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "‚Ä¢ –î–ª—è –æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–∏–º—è_–±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –í–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è\n\n"
            "üé≠ **–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:**\n"
            f"{current_prompt[:100]}{'...' if len(current_prompt) > 100 else ''}\n\n"
            "üö´ –†–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è!"
        )
    
    await update.message.reply_text(message_text)


async def reset_context(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    context_manager.reset_context(chat_id)
    await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")


async def help_command(update: Update, context: CallbackContext):
    help_text = (
        "üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
        "- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
        "- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
        "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/reset - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/prompt - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "/setprompt - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n"
        "/resetprompt - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "/updatecmds - –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥\n\n"
        "‚ÑπÔ∏è **–í –≥—Ä—É–ø–ø–∞—Ö:**\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ (–±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)\n"
        "‚Ä¢ –î–ª—è –æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @–∏–º—è_–±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ)\n"
        "üö´ –†–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è!"
    )
    await update.message.reply_text(help_text)


async def handle_message(update: Update, context: CallbackContext):
    message = update.effective_message
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not context_manager.check_rate_limit(user.id, min_interval=1.0):
        await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return

    is_ad = await delete_advertisement(update, context)
    if is_ad:
        return

    user_message = message.text or message.caption or ""

    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        bot_username = context.bot.username.lower()
        mentioned = False

        if f"@{bot_username}" in user_message.lower():
            mentioned = True
            user_message = re.sub(f"@{bot_username}", "", user_message, flags=re.IGNORECASE).strip()

        if not mentioned and message.reply_to_message:
            replied_user = message.reply_to_message.from_user
            if replied_user and replied_user.id == context.bot.id:
                mentioned = True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è

    full_name = user.first_name or (user.username if user.username else str(user.id))
    author = {"id": user.id, "name": full_name, "username": user.username}
    context_manager.add_message(chat_id, "user", user_message, author=author)

    # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞ ‚Äî –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP] and not mentioned:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        return

    pollinations_token = os.getenv("POLLINATIONS_TOKEN")
    if not pollinations_token:
        logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        await message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    context_manager.set_generating(chat_id, True)
    typing_task = asyncio.create_task(show_typing(context, chat_id))

    status_message = None
    try:
        messages = context_manager.build_api_messages(chat_id)
        status_message = await message.reply_text("üí≠ –î—É–º–∞—é...")

        start_time = time.time()
        ai_response = await asyncio.to_thread(
            send_to_pollinations,
            messages=messages,
            token=pollinations_token
        )
        logger.info(f"–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")

        try:
            if status_message:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=status_message.message_id
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        if ai_response:
            if len(ai_response) > 4000:
                await send_long_message(context, chat_id, ai_response, message.message_id)
            else:
                await message.reply_text(
                    ai_response,
                    reply_to_message_id=message.message_id,
                    parse_mode=ParseMode.MARKDOWN
                )

            context_manager.add_message(chat_id, "assistant", ai_response)
        else:
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message")
        if status_message:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:1000]}"
                )
            except Exception:
                await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
        else:
            await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
    finally:
        context_manager.set_generating(chat_id, False)
        if typing_task:
            typing_task.cancel()


async def handle_voice(update: Update, context: CallbackContext):
    message = update.effective_message
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not context_manager.check_rate_limit(user_id, min_interval=2.0):
        await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return

    mentioned = False
    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if message.reply_to_message:
            replied_user = message.reply_to_message.from_user
            if replied_user and replied_user.id == context.bot.id:
                mentioned = True

    pollinations_token = os.getenv("POLLINATIONS_TOKEN")
    if not pollinations_token:
        logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        await message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    context_manager.set_generating(chat_id, True)
    typing_task = asyncio.create_task(show_typing(context, chat_id))

    status_message = await message.reply_text("üîä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.voice.file_size and message.voice.file_size > 50 * 1024 * 1024:  # 50 –ú–ë
        await status_message.edit_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 –ú–ë.")
        return
        
    voice_file = await message.voice.get_file()

    temp_dir = tempfile.mkdtemp()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é uuid
    unique_id = str(uuid.uuid4())[:8]
    ogg_path = os.path.join(temp_dir, f"voice_{user_id}_{unique_id}.ogg")
    wav_path = os.path.join(temp_dir, f"voice_{user_id}_{unique_id}.wav")

    try:
        await voice_file.download_to_drive(ogg_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        if not os.path.exists(ogg_path) or os.path.getsize(ogg_path) == 0:
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞")
            return
            
        logger.info(f"OGG –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ogg_path} ({os.path.getsize(ogg_path)} –±–∞–π—Ç)")

        try:
            subprocess.run(
                [
                    'ffmpeg',
                    '-i', ogg_path,
                    '-ar', '16000',
                    '-ac', '1',
                    '-y',
                    wav_path
                ],
                check=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                timeout=30
            )
            logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ WAV: {wav_path} ({os.path.getsize(wav_path)} –±–∞–π—Ç)")
        except subprocess.CalledProcessError as e:
            error_msg = e.stderr.decode('utf-8') if e.stderr else str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {error_msg}")
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        except subprocess.TimeoutExpired:
            logger.error("–¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
            await status_message.edit_text("‚ùå –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ.")
            return

        if os.path.getsize(wav_path) > 25 * 1024 * 1024:
            logger.warning(f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª: {os.path.getsize(wav_path)} –±–∞–π—Ç")
            await status_message.edit_text("‚ùå –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 25 –ú–ë.")
            return

        transcription = await asyncio.to_thread(
            transcribe_audio,
            wav_path,
            pollinations_token
        )

        if not transcription or not transcription.strip():
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
            return

        display_transcription = transcription if len(transcription) <= 100 else transcription[:100] + "..."
        await status_message.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {display_transcription}")

        full_name = user.first_name or (user.username if user.username else str(user.id))
        author = {"id": user.id, "name": full_name, "username": user.username}
        context_manager.add_message(chat_id, "user", transcription, author=author)

        messages = context_manager.build_api_messages(chat_id)
        ai_response = await asyncio.to_thread(
            send_to_pollinations,
            messages=messages,
            token=pollinations_token
        )

        if not ai_response:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")
            # –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
            return

        context_manager.add_message(chat_id, "assistant", ai_response)
        await send_long_message(context, chat_id, ai_response, message.message_id)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:300]}")
    finally:
        context_manager.set_generating(chat_id, False)
        if typing_task:
            typing_task.cancel()
        try:
            shutil.rmtree(temp_dir)
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_dir}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞
    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP] and not mentioned:
        return


async def handle_image(update: Update, context: CallbackContext):
    message = update.effective_message
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not context_manager.check_rate_limit(user_id, min_interval=2.0):
        await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return

    caption = message.caption if message.caption is not None else ""

    mentioned = False
    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        bot_username = context.bot.username.lower()
        if f"@{bot_username}" in caption.lower():
            mentioned = True
            caption = re.sub(f"@{bot_username}", "", caption, flags=re.IGNORECASE).strip()

        if not mentioned and message.reply_to_message:
            replied_user = message.reply_to_message.from_user
            if replied_user and replied_user.id == context.bot.id:
                mentioned = True

    pollinations_token = os.getenv("POLLINATIONS_TOKEN")
    if not pollinations_token:
        logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        await message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    context_manager.set_generating(chat_id, True)
    typing_task = asyncio.create_task(show_typing(context, chat_id))

    status_message = await message.reply_text("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if message.photo[-1].file_size and message.photo[-1].file_size > 20 * 1024 * 1024:  # 20 –ú–ë
        await status_message.edit_text("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë.")
        return
        
    photo_file = await message.photo[-1].get_file()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    temp_dir = tempfile.mkdtemp()
    image_path = os.path.join(temp_dir, f"image_{user_id}_{int(time.time())}.jpg")

    try:
        await photo_file.download_to_drive(image_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        if not os.path.exists(image_path) or os.path.getsize(image_path) == 0:
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
            
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path} ({os.path.getsize(image_path)} –±–∞–π—Ç)")

        question = caption if caption.strip() else "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"
        analysis = await asyncio.to_thread(
            analyze_image,
            image_path,
            pollinations_token,
            question
        )

        if not analysis:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        full_name = user.first_name or (user.username if user.username else str(user.id))
        author = {"id": user.id, "name": full_name, "username": user.username}
        context_manager.add_message(chat_id, "user", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {question}", author=author)
        context_manager.add_message(chat_id, "assistant", analysis)

        await status_message.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        await send_long_message(context, chat_id, analysis, message.message_id)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:300]}")
    finally:
        context_manager.set_generating(chat_id, False)
        if typing_task:
            typing_task.cancel()
        try:
            shutil.rmtree(temp_dir)
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_dir}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞
    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP] and not mentioned:
        return


async def prompt_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    current_prompt = context_manager.get_system_prompt()
    await update.message.reply_text(
        f"ü§ñ **–¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**\n\n{current_prompt}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setprompt –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ /resetprompt –¥–ª—è —Å–±—Ä–æ—Å–∞.",
        parse_mode=ParseMode.MARKDOWN
    )


async def setprompt_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    if not context.args:
        await update.message.reply_text(
            "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "/setprompt <–Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç>\n\n"
            "**–ü—Ä–∏–º–µ—Ä:**\n"
            "/setprompt –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        )
        return
    
    new_prompt = " ".join(context.args)
    context_manager.set_system_prompt(new_prompt)
    
    await update.message.reply_text(
        f"‚úÖ **–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
        f"–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n{new_prompt}\n\n"
        "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )


async def resetprompt_command(update: Update, context: CallbackContext):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    context_manager.reset_system_prompt()
    default_prompt = context_manager.get_system_prompt()
    
    await update.message.reply_text(
        f"üîÑ **–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!**\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n{default_prompt}"
    )


async def update_commands_command(update: Update, context: CallbackContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        from telegram import BotCommand
        
        commands = [
            BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º"),
            BotCommand("help", "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            BotCommand("reset", "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
            BotCommand("prompt", "üé≠ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
            BotCommand("setprompt", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
            BotCommand("resetprompt", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"),
        ]
        
        await context.bot.set_my_commands(commands)
        await update.message.reply_text(
            "‚úÖ **–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤ —á–∞—Ç–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ –∫–æ–º–∞–Ω–¥–∞–º.\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é (/) –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        logger.info(f"–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")
        await update.message.reply_text(
            "‚ùå **–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥!**\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)}"
        )


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
    if update and hasattr(update, 'message'):
        try:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")


