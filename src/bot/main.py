import os
import logging
import sys
import subprocess
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from telegram import BotCommand, Update
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters

from config.settings import settings
from services.context_manager import context_manager
from services.pollinations_service import close_http_session
from utils.rate_limiter import rate_limiter
# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç delete_advertisement - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

# –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from bot.handlers.commands import (
    start, reset_context, help_command, roles_command,
    prompt_command, setprompt_command, resetprompt_command,
    update_commands_command,
    imagine_command, settings_command, health_command, stop_command
)
from bot.handlers.messages import handle_message, handle_voice, handle_image
from bot.handlers.callbacks import role_callback, imagine_callback, settings_callback, imagine_size_callback, imagine_style_callback, imagine_new_callback, force_stop_callback
from bot.handlers.errors import error_handler


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, settings.log_level.upper()),
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


def check_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        subprocess.run(['ffmpeg', '-version'], 
                      stdout=subprocess.PIPE, 
                      stderr=subprocess.PIPE, 
                      check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False


async def set_bot_commands(application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("reset", "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        BotCommand("prompt", "üé≠ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
        BotCommand("setprompt", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
        BotCommand("resetprompt", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"),
        BotCommand("roles", "üé≠ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏"),
        BotCommand("settings", "‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
        BotCommand("imagine", "üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"),
        BotCommand("stop", "üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
        BotCommand("health", "üè• –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞")
    ]
    
    try:
        await application.bot.set_my_commands(commands)
        logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
        if not check_ffmpeg():
            logger.error("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            logger.warning("–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –í–ö–õ–Æ–ß–ê–ï–ú –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–£–Æ –û–ë–†–ê–ë–û–¢–ö–£
        application = Application.builder().token(settings.telegram_bot_token).concurrent_updates(True).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –∏ –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        application.bot.request.timeout = settings.api_timeout
        application.bot.request.connect_timeout = settings.api_timeout // 2
        application.bot.request.read_timeout = settings.api_timeout
        
        # –í–ê–ñ–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Telegram Bot API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        application.bot.request.connection_pool_size = 100  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        application.bot.request.connection_pool_maxsize = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return application
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        raise


def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ - —Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ (–ª–∏—á–Ω—ã–µ —á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã)
    application.add_handler(CommandHandler("start", start), group=0)
    application.add_handler(CommandHandler("reset", reset_context), group=0)
    application.add_handler(CommandHandler("help", help_command), group=0)
    application.add_handler(CommandHandler("prompt", prompt_command), group=0)
    application.add_handler(CommandHandler("setprompt", setprompt_command), group=0)
    application.add_handler(CommandHandler("resetprompt", resetprompt_command), group=0)
    application.add_handler(CommandHandler("roles", roles_command), group=0)
    application.add_handler(CommandHandler("updatecmds", update_commands_command), group=0)
    application.add_handler(CommandHandler("imagine", imagine_command), group=0)
    application.add_handler(CommandHandler("settings", settings_command), group=0)
    application.add_handler(CommandHandler("health", health_command), group=0)
    application.add_handler(CommandHandler("stop", stop_command), group=0)

    application.add_handler(CallbackQueryHandler(role_callback, pattern=r"^role::"), group=0)
    application.add_handler(CallbackQueryHandler(imagine_callback, pattern=r"^imagine::"), group=0)
    application.add_handler(CallbackQueryHandler(settings_callback, pattern=r"^settings::"), group=0)
    application.add_handler(CallbackQueryHandler(imagine_size_callback, pattern=r"^imagine_size::"), group=0)
    application.add_handler(CallbackQueryHandler(imagine_style_callback, pattern=r"^imagine_style::"), group=0)
    application.add_handler(CallbackQueryHandler(imagine_new_callback, pattern=r"^imagine_new"), group=0)
    application.add_handler(CallbackQueryHandler(force_stop_callback, pattern=r"^force_stop"), group=0)

    # –£–±–∏—Ä–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∫–ª–∞–º—ã - —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç–∞—Ö AI

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π - –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message), group=2)
    application.add_handler(MessageHandler(filters.VOICE, handle_voice), group=2)
    application.add_handler(MessageHandler(filters.PHOTO, handle_image), group=2)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


async def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    application = await main()
    setup_handlers(application)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º cleanup task –¥–ª—è rate limiter
    rate_limiter.start_cleanup_task()
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–æ–Ω —Å–∞–º –≤—ã–∑—ã–≤–∞–µ—Ç initialize –∏ start)
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º polling...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.initialize()
    await application.start()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await set_bot_commands(application)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await application.updater.start_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )
    
    # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        pass
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await application.stop()
    await application.shutdown()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
    await close_http_session()


if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)
