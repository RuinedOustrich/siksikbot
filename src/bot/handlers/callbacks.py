import logging
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import CallbackContext

from services.context_manager import context_manager
from services.pollinations_service import generate_image_async, auto_analyze_generated_image
from utils.decorators import handle_errors
from config.settings import settings

logger = logging.getLogger(__name__)


async def _safe_edit_query_message(query, text, reply_markup=None):
    try:
        m = query.message
        if m and (m.caption is not None or m.photo or m.document or m.video):
            return await query.edit_message_caption(caption=text, reply_markup=reply_markup)
        return await query.edit_message_text(text=text, reply_markup=reply_markup)
    except Exception:
        return None


@handle_errors
async def role_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if not data.startswith("role::"):
        return
    _, value = data.split("::", 1)
    chat_id = query.message.chat.id
    if value == "reset":
        context_manager.reset_role(chat_id)
        await query.edit_message_text("‚úÖ –†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return
    try:
        context_manager.set_role(chat_id, value)
        current_prompt = context_manager.get_system_prompt(chat_id)
        await query.edit_message_text(
            f"‚úÖ –†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value}\n\n–ù–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å:\n{current_prompt}"
        )
    except ValueError:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")


@handle_errors
async def settings_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if not data.startswith("settings::"):
        return
    chat_id = query.message.chat.id

    s = context_manager.get_settings(chat_id)
    action = data.split("::", 1)[1]

    if action == "toggle_verbosity":
        order = ["short", "normal", "long"]
        cur = s.get("verbosity", "normal")
        nxt = order[(order.index(cur) + 1) % len(order)]
        s = context_manager.update_settings(chat_id, verbosity=nxt)
    elif action == "toggle_lang":
        order = ["auto", "ru", "en"]
        cur = s.get("lang", "auto")
        nxt = order[(order.index(cur) + 1) % len(order)]
        s = context_manager.update_settings(chat_id, lang=nxt)
    elif action == "toggle_group_mode":
    # –î–æ—Å—Ç—É–ø–Ω—ã 2 —Ä–µ–∂–∏–º–∞: –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–µ, –ª–∏–±–æ –≤—Å–µ–≥–¥–∞
        order = ["mention_or_reply", "always"]
        cur = s.get("group_mode", "mention_or_reply")
        nxt = order[(order.index(cur) + 1) % len(order)]
        s = context_manager.update_settings(chat_id, group_mode=nxt)
    elif action == "context_limit":
        # –ö—Ä—É—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏—è 20/40/60/100
        order = [20, 40, 60, 100]
        cur = int(s.get("context_limit", context_manager.get_context_limit(chat_id)))
        nxt = order[(order.index(cur) + 1) % len(order)] if cur in order else context_manager.get_context_limit(chat_id)
        s = context_manager.update_settings(chat_id, context_limit=nxt)
    elif action == "toggle_auto_analyze":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        context_manager.toggle_auto_analyze(chat_id)
    else:
        return

    verb = s.get("verbosity", "normal")
    lang = s.get("lang", "auto")
    group_mode = s.get("group_mode", "mention_or_reply")
    context_limit = s.get("context_limit", context_manager.get_context_limit(chat_id))
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑–∞
    auto_analyze_enabled = context_manager.is_auto_analyze_enabled(chat_id)
    auto_analyze_text = "–í–∫–ª—é—á–µ–Ω" if auto_analyze_enabled else "–û—Ç–∫–ª—é—á–µ–Ω"

    keyboard = [
        [InlineKeyboardButton(f"–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {verb}", callback_data="settings::toggle_verbosity")],
        [InlineKeyboardButton(f"–Ø–∑—ã–∫: {lang}", callback_data="settings::toggle_lang")],
        [InlineKeyboardButton(f"–†–µ–∂–∏–º –≤ –≥—Ä—É–ø–ø–µ: {group_mode}", callback_data="settings::toggle_group_mode")],
        [InlineKeyboardButton(f"–õ–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context_limit}", callback_data="settings::context_limit")],
        [InlineKeyboardButton(f"–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {auto_analyze_text}", callback_data="settings::toggle_auto_analyze")],
    ]

    text = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n\n"
        f"‚Ä¢ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {verb}\n"
        f"‚Ä¢ –Ø–∑—ã–∫: {lang}\n"
        f"‚Ä¢ –†–µ–∂–∏–º –≤ –≥—Ä—É–ø–ø–µ: {group_mode}\n"
        f"‚Ä¢ –õ–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context_limit}\n"
        f"‚Ä¢ –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {auto_analyze_text}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å."
    )

    await _safe_edit_query_message(query, text, InlineKeyboardMarkup(keyboard))


@handle_errors
async def imagine_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if not data.startswith("imagine::"):
        return
    if not query.message:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –∏–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", show_alert=True)
        return
    try:
        parts = data.split("::")
        if len(parts) == 2:
            _, size_part = parts
            # –í–æ–∑—å–º—ë–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ —Å–ª—É–∂–µ–±–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
            if query.message:
                original_caption = (query.message.caption or "")
                prompt = original_caption.split("\n\nüé®", 1)[0].strip()
            else:
                prompt = ""
            seed = None
        elif len(parts) == 3:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏: —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–≥ –±—ã—Ç—å seed, –Ω–æ –º—ã –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            _, size_part, _legacy_seed = parts
            if query.message:
                original_caption = (query.message.caption or "")
                prompt = original_caption.split("\n\nüé®", 1)[0].strip()
            else:
                prompt = ""
            seed = None
        elif len(parts) >= 4:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —è–≤–Ω—ã–º prompt –∏ seed
            _, size_part, prompt, _legacy_seed = parts[:4]
            seed = None
        else:
            raise ValueError("invalid callback format")
        w_str, h_str = size_part.lower().split("x", 1)
        width = max(256, min(1536, int(w_str)))
        height = max(256, min(1536, int(h_str)))
    except Exception as e:
        chat_id = query.message.chat.id if query.message else None
        try:
            await query.edit_message_caption(caption=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–∫–∏, {e}")
            if chat_id and query.message:
                context_manager.add_cleanup_message(chat_id, query.message.message_id)
        except Exception:
            await query.edit_message_text(text=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–∫–∏, {e}")
            if chat_id and query.message:
                context_manager.add_cleanup_message(chat_id, query.message.message_id)
        return

    chat_id = query.message.chat.id
    if context_manager.is_generating(chat_id, "image"):
        await query.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∏–¥—ë—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=False)
        return
    context_manager.set_generating(chat_id, True, "image")
    try:
        await query.edit_message_caption(caption=f"{prompt}\n\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {width}√ó{height}‚Ä¶")
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è seed
        seed_value = None
        if seed not in (None, "", "None"):
            try:
                seed_value = int(seed)
            except Exception:
                seed_value = None
        if seed_value is None:
            seed_value = random.randint(1, 2**31 - 1)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        if context_manager.is_force_stop_requested(chat_id):
            await query.edit_message_caption(caption="üõë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            context_manager.add_cleanup_message(chat_id, query.message.message_id)
            context_manager.clear_force_stop(chat_id)
            return

        content, _ = await generate_image_async(prompt, width, height, seed=seed_value)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if context_manager.is_force_stop_requested(chat_id):
            await query.edit_message_caption(caption="üõë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            context_manager.add_cleanup_message(chat_id, query.message.message_id)
            context_manager.clear_force_stop(chat_id)
            return
            
        if not content:
            await query.edit_message_caption(caption="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            context_manager.add_cleanup_message(chat_id, query.message.message_id)
            return
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context_manager.is_auto_analyze_enabled(chat_id):
            try:
                analysis = await auto_analyze_generated_image(
                    image_content=content, 
                    prompt=prompt, 
                    token=settings.pollinations_token
                )
                if analysis:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    context_manager.add_image_context(chat_id, analysis)
                    logger.debug(f"–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        next_seed = random.randint(1, 2**31 - 1)
        callback_data = f"imagine::{width}x{height}"
        # –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–ª–∏–Ω—ã callback_data
        try:
            logger.debug("regen callback_data=%r len=%d", callback_data, len(callback_data.encode('utf-8')))
        except Exception:
            pass
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=callback_data)],
        ])
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent = await context.bot.send_photo(chat_id=chat_id, photo=content, caption=f"{prompt}", reply_markup=keyboard)
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
        except Exception:
            pass
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        for mid in context_manager.consume_cleanup_messages(chat_id):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=mid)
            except Exception:
                pass
    except Exception as e:
        logger.exception(
            "imagine_callback error | chat_id=%s user_id=%s data=%r",
            chat_id if 'chat_id' in locals() else None,
            getattr(query.from_user, 'id', None),
            data,
        )
        try:
            await query.edit_message_caption(caption=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:300]}")
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if 'chat_id' in locals() and chat_id and query.message:
                context_manager.add_cleanup_message(chat_id, query.message.message_id)
        except Exception:
            try:
                await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:300]}")
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                if 'chat_id' in locals() and chat_id and query.message:
                    context_manager.add_cleanup_message(chat_id, query.message.message_id)
            except Exception:
                pass
    finally:
        context_manager.set_generating(chat_id, False, "image")


@handle_errors
async def imagine_size_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    query = update.callback_query
    chat_id = query.message.chat.id
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        size_key = query.data.split("::", 1)[1]
        
        if size_key == "custom":
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            await query.edit_message_text("üöß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö.")
            return
        
        if size_key not in settings.image_size_presets:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä")
            return
        
        preset = settings.image_size_presets[size_key]
        width, height = preset["width"], preset["height"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
        from bot.handlers.commands import _show_style_selection
        text, keyboard = await _show_style_selection(chat_id, context.bot, size_key, width, height)
        
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
        await query.answer()
        
    except Exception as e:
        logger.exception("imagine_size_callback error")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞")


@handle_errors
async def imagine_style_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    query = update.callback_query
    chat_id = query.message.chat.id
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        style_key = query.data.split("::", 1)[1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = context_manager.get_user_state(chat_id, "imagine")
        if not state:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /imagine")
            return
        
        size_key = state["size_key"]
        width = state["width"]
        height = state["height"]
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        from bot.handlers.commands import _request_description
        text = await _request_description(chat_id, context.bot, size_key, width, height, style_key)
        
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
        await query.answer()
        
    except Exception as e:
        logger.exception("imagine_style_callback error")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è")


@handle_errors
async def imagine_new_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'"""
    query = update.callback_query
    chat_id = query.message.chat.id
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        from bot.handlers.commands import _show_size_selection
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è _show_size_selection
        class FakeMessage:
            def __init__(self, chat_id, bot):
                self.chat_id = chat_id
                self.bot = bot
                
            async def reply_text(self, text, reply_markup=None, parse_mode=None):
                return await self.bot.send_message(
                    self.chat_id, text, 
                    reply_markup=reply_markup, 
                    parse_mode=parse_mode
                )
        
        class FakeChat:
            def __init__(self, chat_id):
                self.id = chat_id
        
        class FakeUpdate:
            def __init__(self, chat_id, bot):
                self.message = FakeMessage(chat_id, bot)
                self.effective_chat = FakeChat(chat_id)
        
        fake_update = FakeUpdate(chat_id, context.bot)
        await _show_size_selection(fake_update, context)
        
        await query.answer("üé® –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
        
    except Exception as e:
        logger.exception("imagine_new_callback error")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", show_alert=True)


@handle_errors
async def force_stop_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    query = update.callback_query
    chat_id = query.message.chat.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        has_active_operations = (
            context_manager.is_generating(chat_id, "image") or
            context_manager.is_generating(chat_id, "text") or
            context_manager.is_generating(chat_id, "voice") or
            context_manager.has_user_state(chat_id, "imagine")
        )
        
        if not has_active_operations:
            await query.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", show_alert=True)
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        context_manager.force_stop_all_operations(chat_id)
        
        stop_msg = await query.edit_message_text(
            "üõë **–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"
            "‚Ä¢ –í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–∏—â–µ–Ω—ã\n\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        context_manager.add_cleanup_message(chat_id, stop_msg.message_id)
        
        await query.answer("üõë –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        logger.exception("force_stop_callback error")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π", show_alert=True)
