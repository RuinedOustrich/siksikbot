import logging
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from services.context_manager import context_manager
from services.pollinations_service import generate_image

logger = logging.getLogger(__name__)


async def _safe_edit_query_message(query, text, reply_markup=None):
    try:
        m = query.message
        if m and (m.caption is not None or m.photo or m.document or m.video):
            return await query.edit_message_caption(caption=text, reply_markup=reply_markup)
        return await query.edit_message_text(text=text, reply_markup=reply_markup)
    except Exception:
        return None


async def role_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if not data.startswith("role::"):
        return
    _, value = data.split("::", 1)
    chat_id = query.message.chat.id
    if value == "reset":
        context_manager.reset_role(chat_id)
        await query.edit_message_text("‚úÖ –†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return
    try:
        context_manager.set_role(chat_id, value)
        current_prompt = context_manager.get_system_prompt(chat_id)
        await query.edit_message_text(
            f"‚úÖ –†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value}\n\n–ù–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å:\n{current_prompt}"
        )
    except ValueError:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")


async def imagine_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if not data.startswith("imagine::"):
        return
    if not query.message:
        await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –∏–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", show_alert=True)
        return
    try:
        parts = data.split("::")
        if len(parts) == 2:
            _, size_part = parts
            # –í–æ–∑—å–º—ë–º –ø—Ä–æ–º–ø—Ç –∏–∑ –ø–æ–¥–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ —Å–ª—É–∂–µ–±–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
            if query.message:
                original_caption = (query.message.caption or "")
                prompt = original_caption.split("\n\nüé®", 1)[0].strip()
            else:
                prompt = ""
            seed = None
        elif len(parts) == 3:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏: —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–≥ –±—ã—Ç—å seed, –Ω–æ –º—ã –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            _, size_part, _legacy_seed = parts
            if query.message:
                original_caption = (query.message.caption or "")
                prompt = original_caption.split("\n\nüé®", 1)[0].strip()
            else:
                prompt = ""
            seed = None
        elif len(parts) >= 4:
            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —è–≤–Ω—ã–º prompt –∏ seed
            _, size_part, prompt, _legacy_seed = parts[:4]
            seed = None
        else:
            raise ValueError("invalid callback format")
        w_str, h_str = size_part.lower().split("x", 1)
        width = max(256, min(1536, int(w_str)))
        height = max(256, min(1536, int(h_str)))
    except Exception as e:
        try:
            await query.edit_message_caption(caption=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–∫–∏, {e}")
        except Exception:
            await query.edit_message_text(text=f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–∫–∏, {e}")
        return

    chat_id = query.message.chat.id
    if context_manager.is_generating(chat_id):
        await query.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∏–¥—ë—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.", show_alert=False)
        return
    context_manager.set_generating(chat_id, True)
    try:
        await query.edit_message_caption(caption=f"{prompt}\n\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {width}√ó{height}‚Ä¶")
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è seed
        seed_value = None
        if seed not in (None, "", "None"):
            try:
                seed_value = int(seed)
            except Exception:
                seed_value = None
        if seed_value is None:
            seed_value = random.randint(1, 2**31 - 1)
        content, _ = await asyncio.to_thread(generate_image, prompt, width, height, seed=seed_value)
        if not content:
            await query.edit_message_caption(caption="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        next_seed = random.randint(1, 2**31 - 1)
        callback_data = f"imagine::{width}x{height}"
        # –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–ª–∏–Ω—ã callback_data
        try:
            logger.debug("regen callback_data=%r len=%d", callback_data, len(callback_data.encode('utf-8')))
        except Exception:
            pass
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=callback_data)],
        ])
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏ —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent = await context.bot.send_photo(chat_id=chat_id, photo=content, caption=f"{prompt}", reply_markup=keyboard)
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
        except Exception:
            pass
    except Exception as e:
        logger.exception(
            "imagine_callback error | chat_id=%s user_id=%s data=%r",
            chat_id if 'chat_id' in locals() else None,
            getattr(query.from_user, 'id', None),
            data,
        )
        try:
            await query.edit_message_caption(caption=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:300]}")
        except Exception:
            try:
                await query.edit_message_text(text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:300]}")
            except Exception:
                pass
    finally:
        context_manager.set_generating(chat_id, False)
