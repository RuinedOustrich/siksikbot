import os
import logging
import time
import asyncio
import re
import shutil
import subprocess
import tempfile
import uuid
from telegram import Update
from telegram.constants import ChatType, ParseMode
from telegram.ext import CallbackContext, ContextTypes

from config.settings import settings

from services.context_manager import context_manager
from services.pollinations_service import (
    send_to_pollinations,
    transcribe_audio,
    analyze_image,
    generate_image,
)
from utils.telegram_utils import show_typing, send_long_message, strip_advertisement

logger = logging.getLogger(__name__)


async def handle_message(update: Update, context: CallbackContext):
    message = update.effective_message
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}: {message.text[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not context_manager.check_rate_limit(user.id, min_interval=1.0):
        warn = await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    # –ï—Å–ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏–º –∏ –≤—ã–π–¥–µ–º
    if context_manager.is_generating(chat_id):
        warn = await message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –µ—â—ë –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return

    user_message = message.text or message.caption or ""

    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        bot_username = context.bot.username.lower()
        mentioned = False

        if f"@{bot_username}" in user_message.lower():
            mentioned = True
            user_message = re.sub(f"@{bot_username}", "", user_message, flags=re.IGNORECASE).strip()

        if not mentioned and message.reply_to_message:
            replied_user = message.reply_to_message.from_user
            if replied_user and replied_user.id == context.bot.id:
                mentioned = True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è

    full_name = user.first_name or (user.username if user.username else str(user.id))
    author = {"id": user.id, "name": full_name, "username": user.username}
    context_manager.add_message(chat_id, "user", user_message, author=author)

    # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞ ‚Äî –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP] and not mentioned:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        return

    pollinations_token = settings.pollinations_token
    if not pollinations_token:
        logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        await message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    context_manager.set_generating(chat_id, True)
    typing_task = asyncio.create_task(show_typing(context, chat_id))

    status_message = None
    try:
        messages = context_manager.build_api_messages(chat_id)
        status_message = await message.reply_text("üí≠ –î—É–º–∞—é...")

        start_time = time.time()
        ai_response = await asyncio.to_thread(
            send_to_pollinations,
            messages=messages,
            token=pollinations_token
        )
        logger.info(f"–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")

        try:
            if status_message:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=status_message.message_id
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        if ai_response:
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            ai_response_clean = strip_advertisement(ai_response)
            if len(ai_response_clean) > 4000:
                await send_long_message(context, chat_id, ai_response_clean, message.message_id)
            else:
                await message.reply_text(
                    ai_response_clean,
                    reply_to_message_id=message.message_id,
                    parse_mode=ParseMode.MARKDOWN
                )

            context_manager.add_message(chat_id, "assistant", ai_response_clean)
            # –£–¥–∞–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            for mid in context_manager.consume_cleanup_messages(chat_id):
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=mid)
                except Exception:
                    pass
        else:
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message")
        if status_message:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:1000]}"
                )
            except Exception:
                err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
                context_manager.add_cleanup_message(chat_id, err.message_id)
        else:
            err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
            context_manager.add_cleanup_message(chat_id, err.message_id)
    finally:
        context_manager.set_generating(chat_id, False)
        if typing_task:
            typing_task.cancel()


async def handle_voice(update: Update, context: CallbackContext):
    message = update.effective_message
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not context_manager.check_rate_limit(user.id, min_interval=2.0):
        warn = await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return

    # –ï—Å–ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏–º –∏ –≤—ã–π–¥–µ–º
    if context_manager.is_generating(chat_id):
        warn = await message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –µ—â—ë –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return

    voice = message.voice
    if not voice:
        await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = voice.file_size / (1024 * 1024) if voice.file_size else 0
    if file_size_mb > 50:  # 50MB –ª–∏–º–∏—Ç
        await message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB")
        return

    context_manager.set_generating(chat_id, True)
    typing_task = asyncio.create_task(show_typing(context, chat_id))
    status_message = None

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        status_message = await message.reply_text("üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        file = await context.bot.get_file(voice.file_id)
        temp_dir = tempfile.mkdtemp()
        ogg_path = os.path.join(temp_dir, f"voice_{uuid.uuid4()}.ogg")
        
        await file.download_to_drive(ogg_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        wav_path = os.path.join(temp_dir, f"voice_{uuid.uuid4()}.wav")
        try:
            subprocess.run([
                'ffmpeg', '-i', ogg_path, '-acodec', 'pcm_s16le', 
                '-ar', '16000', '-ac', '1', wav_path
            ], check=True, capture_output=True)
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞")
            return
        except FileNotFoundError:
            await message.reply_text("‚ùå FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        pollinations_token = settings.pollinations_token
        if not pollinations_token:
            logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            await message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_message.message_id,
            text="üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        )

        transcription = await asyncio.to_thread(
            transcribe_audio,
            audio_path=wav_path,
            token=pollinations_token
        )

        if not transcription:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            return

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            shutil.rmtree(temp_dir)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")

        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_message.message_id,
            text=f"üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n{transcription}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        full_name = user.first_name or (user.username if user.username else str(user.id))
        author = {"id": user.id, "name": full_name, "username": user.username}
        context_manager.add_message(chat_id, "user", transcription, author=author)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_message.message_id,
            text="üí≠ –î—É–º–∞—é..."
        )

        messages = context_manager.build_api_messages(chat_id)
        start_time = time.time()
        ai_response = await asyncio.to_thread(
            send_to_pollinations,
            messages=messages,
            token=pollinations_token
        )
        logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")

        try:
            await context.bot.delete_message(
                chat_id=chat_id,
                message_id=status_message.message_id
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        if ai_response:
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            ai_response_clean = strip_advertisement(ai_response)
            if len(ai_response_clean) > 4000:
                await send_long_message(context, chat_id, ai_response_clean, message.message_id)
            else:
                await message.reply_text(
                    ai_response_clean,
                    reply_to_message_id=message.message_id,
                    parse_mode=ParseMode.MARKDOWN
                )

            context_manager.add_message(chat_id, "assistant", ai_response_clean)
            # –£–¥–∞–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            for mid in context_manager.consume_cleanup_messages(chat_id):
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=mid)
                except Exception:
                    pass
        else:
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_voice")
        if status_message:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:1000]}"
                )
            except Exception:
                err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
                context_manager.add_cleanup_message(chat_id, err.message_id)
        else:
            err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
            context_manager.add_cleanup_message(chat_id, err.message_id)
    finally:
        context_manager.set_generating(chat_id, False)
        if typing_task:
            typing_task.cancel()


async def handle_image(update: Update, context: CallbackContext):
    message = update.effective_message
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not context_manager.check_rate_limit(user.id, min_interval=2.0):
        warn = await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return

    # –ï—Å–ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏–º –∏ –≤—ã–π–¥–µ–º
    if context_manager.is_generating(chat_id):
        warn = await message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –µ—â—ë –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = message.photo[-1] if message.photo else None
    if not photo:
        await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = photo.file_size / (1024 * 1024) if photo.file_size else 0
    if file_size_mb > 10:  # 10MB –ª–∏–º–∏—Ç
        await message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB")
        return

    context_manager.set_generating(chat_id, True)
    typing_task = asyncio.create_task(show_typing(context, chat_id))
    status_message = None

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        status_message = await message.reply_text("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        file = await context.bot.get_file(photo.file_id)
        temp_dir = tempfile.mkdtemp()
        image_path = os.path.join(temp_dir, f"image_{uuid.uuid4()}.jpg")
        
        await file.download_to_drive(image_path)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        pollinations_token = settings.pollinations_token
        if not pollinations_token:
            logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            await message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        analysis = await asyncio.to_thread(
            analyze_image,
            image_path=image_path,
            token=pollinations_token
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            shutil.rmtree(temp_dir)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")

        if not analysis:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_message.message_id,
            text=f"üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n{analysis}\n\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        context_manager.add_image_context(chat_id, analysis)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_image")
        if status_message:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:1000]}"
                )
            except Exception:
                err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
                context_manager.add_cleanup_message(chat_id, err.message_id)
        else:
            err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
            context_manager.add_cleanup_message(chat_id, err.message_id)
    finally:
        context_manager.set_generating(chat_id, False)
        if typing_task:
            typing_task.cancel()
