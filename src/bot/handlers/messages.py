import os
import logging
import time
import asyncio
import re
import shutil
import subprocess
import tempfile
import uuid
from typing import Dict, List, Any, Optional, Tuple
from telegram import Update
from telegram.constants import ChatType, ParseMode
from telegram.ext import CallbackContext

from config.settings import settings

from services.context_manager import context_manager
from services.pollinations_service import (
    send_to_pollinations_async,
    transcribe_audio_async,
    analyze_image_async,
    _is_fallback_message,
)
from utils.telegram_utils import show_typing, strip_advertisement, safe_format_for_telegram, send_long_message
from utils.decorators import handle_errors, track_performance

logger = logging.getLogger(__name__)

# –ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å –Ω–∞ —á–∞—Ç: [{user_message, author, reply_to_message_id}]
PENDING_QUEUES: Dict[int, List[Dict[str, Any]]] = {}

# –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
PROCESSED_MESSAGES: Dict[int, set] = {}  # chat_id -> set of message_ids


def _validate_user_message(message: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not message or not message.strip():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã - —É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ Telegram —Å–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π
    # if len(message) > settings.max_message_length:
    #     logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
    #     return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–±–æ–ª–µ–µ –º—è–≥–∫–∞—è)
    dangerous_patterns = [
        "ignore previous instructions",
        "forget everything",
        "you are now",
        "act as if",
        "pretend to be",
        "roleplay as",
        "system prompt",
        "jailbreak",
        "dan mode",
        "developer mode",
    ]
    
    message_lower = message.lower()
    for pattern in dangerous_patterns:
        if pattern in message_lower:
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {pattern}")
            return False
    
    return True


async def process_queue(context: CallbackContext, chat_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞"""
    while True:
        next_task = _dequeue_text_task(chat_id)
        if not next_task:
            break
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            context_manager.set_generating(chat_id, True, "text")
            typing_task = asyncio.create_task(show_typing(context, chat_id))

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            q_author = next_task["author"]
            q_user_message = next_task["user_message"]
            q_reply_to = next_task.get("reply_to_message_id")

            context_manager.add_message(chat_id, "user", q_user_message, author=q_author)
            messages = context_manager.build_api_messages(chat_id)
            status = await context.bot.send_message(chat_id=chat_id, text="üí≠ –î—É–º–∞—é...", reply_to_message_id=q_reply_to)

            ai_response = await send_to_pollinations_async(
                messages=messages,
                token=settings.pollinations_token
            )
            if ai_response:
                ai_response_clean = strip_advertisement(ai_response)
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=status.message_id)
                except Exception:
                    pass
                if len(ai_response_clean) > 4000:
                    await send_long_message(context, chat_id, ai_response_clean, q_reply_to)
                else:
                    formatted = safe_format_for_telegram(ai_response_clean)
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=formatted,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_to_message_id=q_reply_to
                        )
                    except Exception as e:
                        logger.debug(f"Markdown send failed in queue: {e}")
                        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=ai_response_clean,
                            reply_to_message_id=q_reply_to
                        )
                context_manager.add_message(chat_id, "assistant", ai_response_clean)
                for mid in context_manager.consume_cleanup_messages(chat_id):
                    try:
                        await context.bot.delete_message(chat_id=chat_id, message_id=mid)
                    except Exception:
                        pass
            else:
                await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API", reply_to_message_id=q_reply_to)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            context_manager.clear_cleanup_messages(chat_id)
        finally:
            if typing_task:
                typing_task.cancel()
            context_manager.set_generating(chat_id, False, "text")


def _enqueue_text_task(chat_id: int, user_message: str, author: Dict[str, Any], reply_to_message_id: Optional[int]) -> int:
    q = PENDING_QUEUES.get(chat_id)
    if q is None:
        q = []
        PENDING_QUEUES[chat_id] = q
    q.append({
        "type": "text",
        "user_message": user_message,
        "author": author,
        "reply_to_message_id": reply_to_message_id,
    })
    return len(q)


def _dequeue_text_task(chat_id: int) -> Optional[Dict[str, Any]]:
    q = PENDING_QUEUES.get(chat_id) or []
    if not q:
        return None
    task = q.pop(0)
    return task


# --------------- –£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏ –ø—Å–µ–≤–¥–æ—Å—Ç—Ä–∏–º–∏–Ω–≥ ---------------

def _segment_by_code_blocks(text: str) -> List[Tuple[str, str]]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ –±–ª–æ–∫–∞–º –∫–æ–¥–∞"""
    segments = []
    current_pos = 0
    
    # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    code_pattern = r'```(\w+)?\n(.*?)\n```'
    for match in re.finditer(code_pattern, text, re.DOTALL):
        start, end = match.span()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
        if start > current_pos:
            segments.append(("text", text[current_pos:start]))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∫–æ–¥–∞
        segments.append(("code", match.group(0)))
        current_pos = end
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if current_pos < len(text):
        segments.append(("text", text[current_pos:]))
    
    return segments


def _split_text_by_length(text: str, max_length: int) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –¥–ª–∏–Ω–µ, —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞"""
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_pos = 0
    
    while current_pos < len(text):
        end_pos = min(current_pos + max_length, len(text))
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å, –∏—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        if end_pos < len(text):
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            break_pos = text.rfind(' ', current_pos, end_pos)
            if break_pos == -1:
                break_pos = text.rfind('\n', current_pos, end_pos)
            if break_pos == -1:
                break_pos = end_pos
        else:
            break_pos = end_pos
        
        parts.append(text[current_pos:break_pos])
        current_pos = break_pos + 1
    
    return parts


def smart_split_telegram(text: str, max_length: int = 4000) -> List[str]:
    """–£–º–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Telegram"""
    segments = _segment_by_code_blocks(text)
    parts = []
    current_part = ""
    
    for segment_type, segment_text in segments:
        if segment_type == "code":
            # –ë–ª–æ–∫–∏ –∫–æ–¥–∞ –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ–º
            if len(current_part) + len(segment_text) > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = ""
            current_part += segment_text
        else:
            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ
            text_parts = _split_text_by_length(segment_text, max_length - len(current_part))
            for i, text_part in enumerate(text_parts):
                if i == 0:
                    current_part += text_part
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = text_part
                
                if len(current_part) >= max_length:
                    parts.append(current_part.strip())
                    current_part = ""
    
    if current_part:
        parts.append(current_part.strip())
    
    return parts


def add_part_markers(parts: List[str]) -> List[str]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã —á–∞—Å—Ç–µ–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
    if len(parts) <= 1:
        return parts
    
    marked_parts = []
    for i, part in enumerate(parts):
        marker = f"üìÑ –ß–∞—Å—Ç—å {i + 1}/{len(parts)}\n\n"
        marked_parts.append(marker + part)
    
    return marked_parts


# --------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---------------

@handle_errors
@track_performance
async def handle_message(update: Update, context: CallbackContext):
    message = update.effective_message
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat_id in PROCESSED_MESSAGES and message.message_id in PROCESSED_MESSAGES[chat_id]:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
    if chat_id not in PROCESSED_MESSAGES:
        PROCESSED_MESSAGES[chat_id] = set()
    PROCESSED_MESSAGES[chat_id].add(message.message_id)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
    if len(PROCESSED_MESSAGES[chat_id]) > 1000:
        old_messages = list(PROCESSED_MESSAGES[chat_id])[:-1000]
        for old_msg_id in old_messages:
            PROCESSED_MESSAGES[chat_id].discard(old_msg_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not context_manager.check_rate_limit(user.id, chat_id, min_interval=2.0):
        logger.info(f"Rate limit –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        if context_manager.is_generating(chat_id, "text"):
            warn = await message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –µ—â—ë –æ—Ç–≤–µ—á–∞—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å‚Ä¶")
            context_manager.add_cleanup_message(chat_id, warn.message_id)
        else:
            warn = await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            context_manager.add_cleanup_message(chat_id, warn.message_id)
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è rate limiting
    from utils.rate_limiter import rate_limiter
    rate_limiter.record_request(user.id, chat_id)

    # –ï—Å–ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ ‚Äî —Å—Ç–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å
    if context_manager.is_generating(chat_id, "text"):
        pos = _enqueue_text_task(chat_id, message.text or message.caption or "", {
            "id": user.id,
            "name": user.first_name or (user.username if user.username else str(user.id)),
            "username": user.username,
        }, message.message_id)
        warn = await message.reply_text(f"üìö –ó–∞–ø—Ä–æ—Å—ã –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å (–≤—ã #{pos})")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return

    user_message = message.text or message.caption or ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    imagine_state = context_manager.get_user_state(chat_id, "imagine")
    if imagine_state and imagine_state.get("step") == "waiting_description":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)
        timestamp = imagine_state.get("timestamp", 0)
        if time.time() - timestamp > 300:  # 5 –º–∏–Ω—É—Ç
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ imagine –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}, –æ—á–∏—â–∞–µ–º")
            context_manager.clear_user_state(chat_id, "imagine")
        else:
            await _handle_imagine_description(update, context, imagine_state, user_message)
            return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if not _validate_user_message(user_message):
        err_msg = await message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
        context_manager.add_cleanup_message(chat_id, err_msg.message_id)
        return


    mentioned = False
    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        bot_username = context.bot.username.lower()
        settings_s = context_manager.get_settings(chat_id)
        group_mode = settings_s.get("group_mode", "mention_or_reply")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
        if bot_username and f"@{bot_username}" in user_message.lower():
            mentioned = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        replied = False
        if message.reply_to_message:
            replied_user = message.reply_to_message.from_user
            if replied_user and replied_user.id == context.bot.id:
                replied = True

        if group_mode == "mention_or_reply":
            if not (mentioned or replied):
                logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º mention_or_reply ‚Äî –∏–≥–Ω–æ—Ä –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è/–æ—Ç–≤–µ—Ç–∞")
                return
        elif group_mode == "always":
            pass
        else:
            if group_mode == "mention_only":
                if not mentioned:
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º mention_only ‚Äî –∏–≥–Ω–æ—Ä –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                    return
            elif group_mode == "reply_only":
                if not replied:
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º reply_only ‚Äî –∏–≥–Ω–æ—Ä –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–æ—Ç–∞")
                    return
            elif group_mode == "silent":
                logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º silent ‚Äî –∏–≥–Ω–æ—Ä –≤—Å–µ–≥–æ, –∫—Ä–æ–º–µ /–∫–æ–º–∞–Ω–¥")
                return

    full_name = user.first_name or (user.username if user.username else str(user.id))
    author = {"id": user.id, "name": full_name, "username": user.username}
    context_manager.add_message(chat_id, "user", user_message, author=author)

    pollinations_token = settings.pollinations_token
    if not pollinations_token:
        logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        await message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    context_manager.set_generating(chat_id, True, "text")
    typing_task = asyncio.create_task(show_typing(context, chat_id))

    try:
        messages = context_manager.build_api_messages(chat_id)
        status_message = await message.reply_text("üí≠ –î—É–º–∞—é...")

        ai_response = await send_to_pollinations_async(
            messages=messages,
            token=pollinations_token
        )

        try:
            await context.bot.delete_message(
                chat_id=chat_id,
                message_id=status_message.message_id
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        if ai_response:
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            ai_response_clean = strip_advertisement(ai_response)
            formatted = safe_format_for_telegram(ai_response_clean)
            if len(formatted) > 4000:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
                parts = smart_split_telegram(formatted, 4000)
                parts = add_part_markers(parts)
                for i, part in enumerate(parts):
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=part,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_to_message_id=message.message_id if i == 0 else None,
                        )
                    except Exception as e:
                        logger.debug(f"Markdown send failed for part {i+1}/{len(parts)}: {e}")
                        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=part,
                            reply_to_message_id=message.message_id if i == 0 else None,
                        )
            else:
                try:
                    await message.reply_text(
                        formatted,
                        reply_to_message_id=message.message_id,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.debug(f"Markdown send failed: {e}")
                    # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    await message.reply_text(
                        ai_response_clean,
                        reply_to_message_id=message.message_id
                    )

            context_manager.add_message(chat_id, "assistant", ai_response_clean)
            # –£–¥–∞–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            for mid in context_manager.consume_cleanup_messages(chat_id):
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=mid)
                except Exception:
                    pass
        else:
            err_msg = await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")
            context_manager.add_cleanup_message(chat_id, err_msg.message_id)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message")
        err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
        context_manager.add_cleanup_message(chat_id, err.message_id)
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        context_manager.clear_cleanup_messages(chat_id)
    finally:
        if typing_task:
            typing_task.cancel()
        context_manager.set_generating(chat_id, False, "text")

        # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –æ—á–µ—Ä–µ–¥—å (–µ—Å–ª–∏ –µ—Å—Ç—å) –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        if PENDING_QUEUES.get(chat_id):
            task = asyncio.create_task(process_queue(context, chat_id))
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∑–∞–¥–∞—á–∏ –æ—á–µ—Ä–µ–¥–∏
            task.add_done_callback(lambda t: logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–µ—Ä–µ–¥–∏: {t.exception()}") if t.exception() else None)


@handle_errors
@track_performance
async def handle_voice(update: Update, context: CallbackContext):
    message = update.effective_message
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not context_manager.check_rate_limit(user.id, chat_id, min_interval=2.0):
        warn = await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è rate limiting
    from utils.rate_limiter import rate_limiter
    rate_limiter.record_request(user.id, chat_id)

    # –ï—Å–ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏–º –∏ –≤—ã–π–¥–µ–º
    if context_manager.is_generating(chat_id, "voice"):
        warn = await message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return

    voice = message.voice
    if not voice:
        err_msg = await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        context_manager.add_cleanup_message(chat_id, err_msg.message_id)
        return

    # –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö
    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        settings_s = context_manager.get_settings(chat_id)
        group_mode = settings_s.get("group_mode", "mention_or_reply")

        # –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ–±—ã—á–Ω–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –ø–æ—ç—Ç–æ–º—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        mentioned = False
        replied = False
        if message.reply_to_message:
            replied_user = message.reply_to_message.from_user
            if replied_user and replied_user.id == context.bot.id:
                replied = True

        if group_mode == "mention_or_reply":
            if not (mentioned or replied):
                logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º mention_or_reply ‚Äî –∏–≥–Ω–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞")
                return
        elif group_mode == "always":
            pass
        else:
            if group_mode == "mention_only":
                if not mentioned:
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º mention_only ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)")
                    return
            elif group_mode == "reply_only":
                if not replied:
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º reply_only ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±–æ—Ç–∞)")
                    return
            elif group_mode == "silent":
                logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º silent ‚Äî –∏–≥–Ω–æ—Ä –≤—Å–µ–≥–æ, –∫—Ä–æ–º–µ /–∫–æ–º–∞–Ω–¥")
                return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = voice.file_size / (1024 * 1024) if voice.file_size else 0
    if file_size_mb > settings.max_voice_size_mb:
        err_msg = await message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_voice_size_mb}MB")
        context_manager.add_cleanup_message(chat_id, err_msg.message_id)
        return

    context_manager.set_generating(chat_id, True, "voice")
    typing_task = asyncio.create_task(show_typing(context, chat_id))
    status_message = None

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        status_message = await message.reply_text("üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        file = await context.bot.get_file(voice.file_id)
        temp_dir = tempfile.mkdtemp()
        ogg_path = os.path.join(temp_dir, f"voice_{uuid.uuid4()}.ogg")
        
        await file.download_to_drive(ogg_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        wav_path = os.path.join(temp_dir, f"voice_{uuid.uuid4()}.wav")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π subprocess –≤–º–µ—Å—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ subprocess.run()
            process = await asyncio.create_subprocess_exec(
                'ffmpeg', '-i', ogg_path, '-acodec', 'pcm_s16le', 
                '-ar', '16000', '-ac', '1', wav_path,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {stderr.decode()}")
                err_msg = await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞")
                context_manager.add_cleanup_message(chat_id, err_msg.message_id)
                return
        except FileNotFoundError:
            err_msg = await message.reply_text("‚ùå FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            context_manager.add_cleanup_message(chat_id, err_msg.message_id)
            return

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
        pollinations_token = settings.pollinations_token
        if not pollinations_token:
            logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            await message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_message.message_id,
            text="üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        )

        transcription = await transcribe_audio_async(
            audio_path=wav_path,
            token=pollinations_token
        )

        if not transcription:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
            context_manager.add_cleanup_message(chat_id, status_message.message_id)
            return

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            shutil.rmtree(temp_dir)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")

        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        full_name = user.first_name or (user.username if user.username else str(user.id))
        author = {"id": user.id, "name": full_name, "username": user.username}
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: '{transcription}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è fallback —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if _is_fallback_message(transcription):
            # –ï—Å–ª–∏ —ç—Ç–æ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram")
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=status_message.message_id,
                text=transcription
            )
            # –£–¥–∞–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ fallback –æ—Ç–≤–µ—Ç–∞
            for mid in context_manager.consume_cleanup_messages(chat_id):
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=mid)
                except Exception:
                    pass
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        context_manager.add_message(chat_id, "user", transcription, author=author)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=status_message.message_id,
            text="üí≠ –î—É–º–∞—é..."
        )

        messages = context_manager.build_api_messages(chat_id)
        start_time = time.time()
        ai_response = await send_to_pollinations_async(
            messages=messages,
            token=pollinations_token
        )
        logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")

        try:
            await context.bot.delete_message(
                chat_id=chat_id,
                message_id=status_message.message_id
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        if ai_response:
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–ª–æ–∫ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            ai_response_clean = strip_advertisement(ai_response)
            formatted = safe_format_for_telegram(ai_response_clean)
            if len(formatted) > 4000:
                # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ö–µ–º—É: –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç—è–º–∏ –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                parts = smart_split_telegram(formatted, 4000)
                parts = add_part_markers(parts)
                for i, part in enumerate(parts):
                    try:
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=part,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_to_message_id=message.message_id if i == 0 else None,
                        )
                    except Exception as e:
                        logger.debug(f"Markdown send failed for part {i+1}/{len(parts)}: {e}")
                        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=part,
                            reply_to_message_id=message.message_id if i == 0 else None,
                        )
            else:
                try:
                    await message.reply_text(
                        formatted,
                        reply_to_message_id=message.message_id,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.debug(f"Markdown send failed: {e}")
                    # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    await message.reply_text(
                        ai_response_clean,
                        reply_to_message_id=message.message_id
                    )

            context_manager.add_message(chat_id, "assistant", ai_response_clean)
            # –£–¥–∞–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            for mid in context_manager.consume_cleanup_messages(chat_id):
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=mid)
                except Exception:
                    pass
        else:
            err_msg = await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")
            context_manager.add_cleanup_message(chat_id, err_msg.message_id)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_voice")
        if status_message:
            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:1000]}"
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                context_manager.add_cleanup_message(chat_id, status_message.message_id)
            except Exception:
                err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
                context_manager.add_cleanup_message(chat_id, err.message_id)
        else:
            err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
            context_manager.add_cleanup_message(chat_id, err.message_id)
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        context_manager.clear_cleanup_messages(chat_id)
    finally:
        if typing_task:
            typing_task.cancel()
        context_manager.set_generating(chat_id, False, "voice")


@handle_errors
@track_performance
async def handle_image(update: Update, context: CallbackContext):
    message = update.effective_message
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if not context_manager.check_rate_limit(user.id, chat_id, min_interval=2.0):
        logger.info(f"Rate limit –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id} (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
        warn = await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è rate limiting
    from utils.rate_limiter import rate_limiter
    rate_limiter.record_request(user.id, chat_id)

    # –ï—Å–ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏–º –∏ –≤—ã–π–¥–µ–º
    if context_manager.is_generating(chat_id, "image"):
        warn = await message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –µ—â—ë –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Ä¶")
        context_manager.add_cleanup_message(chat_id, warn.message_id)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = message.photo[-1] if message.photo else None
    if not photo:
        err_msg = await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        context_manager.add_cleanup_message(chat_id, err_msg.message_id)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = photo.file_size / (1024 * 1024) if photo.file_size else 0
    if file_size_mb > settings.max_image_size_mb:
        err_msg = await message.reply_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_image_size_mb}MB")
        context_manager.add_cleanup_message(chat_id, err_msg.message_id)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    should_analyze = True
    if update.effective_chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        settings_s = context_manager.get_settings(chat_id)
        group_mode = settings_s.get("group_mode", "mention_or_reply")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        caption = message.caption or ""
        mentioned = False
        if context.bot.username:
            bot_username = context.bot.username.lower()
            if f"@{bot_username}" in caption.lower():
                mentioned = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        replied = False
        if message.reply_to_message:
            replied_user = message.reply_to_message.from_user
            if replied_user and replied_user.id == context.bot.id:
                replied = True

        if group_mode == "mention_or_reply":
            if not (mentioned or replied):
                should_analyze = False
                logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º mention_or_reply ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞")
        elif group_mode == "always":
            pass
        else:
            if group_mode == "mention_only":
                if not mentioned:
                    should_analyze = False
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º mention_only ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞")
            elif group_mode == "reply_only":
                if not replied:
                    should_analyze = False
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º reply_only ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞")
            elif group_mode == "silent":
                logger.info(f"–ì—Ä—É–ø–ø–∞ {chat_id}: —Ä–µ–∂–∏–º silent ‚Äî –∏–≥–Ω–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    file = await context.bot.get_file(photo.file_id)
    temp_dir = tempfile.mkdtemp()
    image_path = os.path.join(temp_dir, f"image_{uuid.uuid4()}.jpg")
    
    try:
        await file.download_to_drive(image_path)
        
        if should_analyze:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            context_manager.set_generating(chat_id, True, "image")
            typing_task = asyncio.create_task(show_typing(context, chat_id))
            status_message = None

            try:
                status_message = await message.reply_text("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                
                pollinations_token = settings.pollinations_token
                if not pollinations_token:
                    logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                    await message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    return

                analysis = await analyze_image_async(
                    image_path=image_path,
                    token=pollinations_token
                )

                if not analysis:
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=status_message.message_id,
                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                    )
                    context_manager.add_cleanup_message(chat_id, status_message.message_id)
                    return

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=status_message.message_id,
                    text=f"üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n{analysis}\n\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ–± —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏!"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context_manager.add_image_context(chat_id, analysis)
                
                # –£–¥–∞–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                for mid in context_manager.consume_cleanup_messages(chat_id):
                    try:
                        await context.bot.delete_message(chat_id=chat_id, message_id=mid)
                    except Exception:
                        pass

            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –≤ handle_image –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ")
                if status_message:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=status_message.message_id,
                            text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:1000]}"
                        )
                        context_manager.add_cleanup_message(chat_id, status_message.message_id)
                    except Exception:
                        err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
                        context_manager.add_cleanup_message(chat_id, err.message_id)
                else:
                    err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:1000]}")
                    context_manager.add_cleanup_message(chat_id, err.message_id)
                context_manager.clear_cleanup_messages(chat_id)
            finally:
                context_manager.set_generating(chat_id, False, "image")
                if typing_task:
                    typing_task.cancel()
        else:
            # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
            pollinations_token = settings.pollinations_token
            if not pollinations_token:
                logger.error("POLLINATIONS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±–µ–∑ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
            analysis = await analyze_image_async(
                image_path=image_path,
                token=pollinations_token
            )

            if analysis:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context_manager.add_image_context(chat_id, analysis)
                logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} –±–µ–∑ –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏–∑–∞")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_image –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
        err = await message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)[:1000]}")
        context_manager.add_cleanup_message(chat_id, err.message_id)
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            shutil.rmtree(temp_dir)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")


async def _handle_imagine_description(update: Update, context: CallbackContext, imagine_state: dict, user_message: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    chat_id = update.effective_chat.id
    description_message_id = update.effective_message.message_id
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        size_key = imagine_state["size_key"]
        width = imagine_state["width"]
        height = imagine_state["height"]
        style_key = imagine_state.get("style_key")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if not user_message or len(user_message.strip()) < 3:
            await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        from bot.handlers.commands import _generate_image
        await _generate_image(chat_id, context.bot, user_message.strip(), width, height, style_key=style_key, description_message_id=description_message_id)
        
    except Exception as e:
        logger.exception("_handle_imagine_description error")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å /imagine")
        context_manager.clear_user_state(chat_id, "imagine")