import os
from pydantic import field_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (Pydantic v2)"""

    # Telegram Bot Token
    telegram_bot_token: str

    # Pollinations API Token
    pollinations_token: str

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ª–∏–º–∏—Ç—ã
    context_limit: int = 20
    # max_message_length —É–±—Ä–∞–Ω - Telegram —Å–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π
    max_voice_size_mb: int = 50
    max_image_size_mb: int = 10

    # –¢–∞–π–º–∞—É—Ç—ã (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    api_timeout: int = 60
    voice_processing_timeout: int = 30
    typing_interval: int = 5

    # Rate limiting
    min_request_interval: float = 2.0
    max_requests_per_minute: int = 30

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    auto_analyze_generated_images: bool = True

    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_size_presets: dict = {
        "square": {"width": 1024, "height": 1024, "name": "–ö–≤–∞–¥—Ä–∞—Ç", "emoji": "üìê"},
        "portrait": {"width": 768, "height": 1024, "name": "–ü–æ—Ä—Ç—Ä–µ—Ç", "emoji": "üìÑ"},
        "landscape": {"width": 1024, "height": 768, "name": "–ü–µ–π–∑–∞–∂", "emoji": "üñºÔ∏è"},
        "wide": {"width": 1280, "height": 720, "name": "–®–∏—Ä–æ–∫–∏–π", "emoji": "üì∫"},
        "wallpaper": {"width": 1920, "height": 1080, "name": "–û–±–æ–∏", "emoji": "üíª"},
        "mobile": {"width": 1080, "height": 1920, "name": "–ú–æ–±–∏–ª—å–Ω—ã–π", "emoji": "üì±"},
        "story": {"width": 1080, "height": 1920, "name": "–°—Ç–æ—Ä–∏—Å", "emoji": "üì≤"},
        "post": {"width": 1080, "height": 1080, "name": "–ü–æ—Å—Ç", "emoji": "üìÆ"}
    }

    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_style_presets: dict = {
        "realism": {"name": "–†–µ–∞–ª–∏–∑–º", "emoji": "üñºÔ∏è", "prompt": "photorealistic, detailed, high quality"},
        "anime": {"name": "–ê–Ω–∏–º–µ", "emoji": "üé≠", "prompt": "anime style, manga style, japanese animation"},
        "cartoon": {"name": "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º", "emoji": "üé™", "prompt": "cartoon style, animated, colorful"},
        "watercolor": {"name": "–ê–∫–≤–∞—Ä–µ–ª—å", "emoji": "üñåÔ∏è", "prompt": "watercolor painting, soft colors, artistic"},
        "fantasy": {"name": "–§—ç–Ω—Ç–µ–∑–∏", "emoji": "‚ú®", "prompt": "fantasy art, magical, mystical, enchanted"},
        "retro": {"name": "–†–µ—Ç—Ä–æ", "emoji": "üèõÔ∏è", "prompt": "retro style, vintage, classic"},
        "cyberpunk": {"name": "–ö–∏–±–µ—Ä–ø–∞–Ω–∫", "emoji": "ü§ñ", "prompt": "cyberpunk style, neon lights, futuristic"},
        "minimalism": {"name": "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", "emoji": "üå∏", "prompt": "minimalist style, simple, clean, elegant"}
    }

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_level: str = "INFO"

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    model_config = SettingsConfigDict(
        env_file=".env",
        case_sensitive=False,
    )

    @field_validator('telegram_bot_token')
    @classmethod
    def validate_telegram_token(cls, v: str) -> str:
        if not v or len(v) < 10:
            raise ValueError('TELEGRAM_BOT_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º')
        return v

    @field_validator('pollinations_token')
    @classmethod
    def validate_pollinations_token(cls, v: str) -> str:
        if not v or len(v) < 10:
            raise ValueError('POLLINATIONS_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º')
        return v

    @field_validator('context_limit')
    @classmethod
    def validate_context_limit(cls, v: int) -> int:
        if v < 1 or v > 100:
            raise ValueError('CONTEXT_LIMIT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 100')
        return v



    @field_validator('max_voice_size_mb')
    @classmethod
    def validate_max_voice_size(cls, v: int) -> int:
        if v < 1 or v > 200:
            raise ValueError('MAX_VOICE_SIZE_MB –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 200')
        return v

    @field_validator('max_image_size_mb')
    @classmethod
    def validate_max_image_size(cls, v: int) -> int:
        if v < 1 or v > 50:
            raise ValueError('MAX_IMAGE_SIZE_MB –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 50')
        return v

    @field_validator('api_timeout')
    @classmethod
    def validate_api_timeout(cls, v: int) -> int:
        if v < 10 or v > 300:
            raise ValueError('API_TIMEOUT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 10 –∏ 300 —Å–µ–∫—É–Ω–¥')
        return v

    @field_validator('min_request_interval')
    @classmethod
    def validate_min_request_interval(cls, v: float) -> float:
        if v < 0.1 or v > 10.0:
            raise ValueError('MIN_REQUEST_INTERVAL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.1 –∏ 10.0 —Å–µ–∫—É–Ω–¥')
        return v

    @field_validator('max_requests_per_minute')
    @classmethod
    def validate_max_requests_per_minute(cls, v: int) -> int:
        if v < 1 or v > 100:
            raise ValueError('MAX_REQUESTS_PER_MINUTE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 100')
        return v


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()
