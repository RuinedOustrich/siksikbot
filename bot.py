import os
import logging
import subprocess
import asyncio
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, MessageHandler, filters

from handlers import (
    start,
    reset_context,
    help_command,
    prompt_command,
    setprompt_command,
    resetprompt_command,
    update_commands_command,
    handle_message,
    handle_voice,
    handle_image,
    error_handler,
)
from telegram_utils import delete_advertisement
from telegram import BotCommand


load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def check_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        subprocess.run(['ffmpeg', '-version'], 
                      stdout=subprocess.PIPE, 
                      stderr=subprocess.PIPE, 
                      check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False


async def set_bot_commands(application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("reset", "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        BotCommand("prompt", "üé≠ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
        BotCommand("setprompt", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
        BotCommand("resetprompt", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"),
    ]
    
    try:
        await application.bot.set_my_commands(commands)
        logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")

async def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
    if not check_ffmpeg():
        logger.error("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        logger.warning("–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    application = Application.builder().token(token).build()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    application.bot.request.timeout = 60.0
    application.bot.request.connect_timeout = 30.0
    application.bot.request.read_timeout = 60.0

    # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ - —Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ (–ª–∏—á–Ω—ã–µ —á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã)
    application.add_handler(CommandHandler("start", start), group=0)
    application.add_handler(CommandHandler("reset", reset_context), group=0)
    application.add_handler(CommandHandler("help", help_command), group=0)
    application.add_handler(CommandHandler("prompt", prompt_command), group=0)
    application.add_handler(CommandHandler("setprompt", setprompt_command), group=0)
    application.add_handler(CommandHandler("resetprompt", resetprompt_command), group=0)
    application.add_handler(CommandHandler("updatecmds", update_commands_command), group=0)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∫–ª–∞–º—ã - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    application.add_handler(
        MessageHandler(filters.TEXT | filters.CAPTION, delete_advertisement),
        group=1
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π - –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
        group=2
    )

    application.add_handler(
        MessageHandler(filters.VOICE, handle_voice),
        group=2
    )

    application.add_handler(
        MessageHandler(filters.PHOTO, handle_image),
        group=2
    )

    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
        await set_bot_commands(application)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        
        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        try:
            await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await application.stop()
            await application.shutdown()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        # Fallback - –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ä–µ–∂–∏–º–µ...")
        application.run_polling()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

 
